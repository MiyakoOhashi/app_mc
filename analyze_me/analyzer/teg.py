#analyze_me/analyzer/teg.py       2020/11/09   M.O
from flask import session

class TEG:                           #TEGエゴグラムメインプログラム
    def __init__(self):
        #テストID
        self.id = "teg"
        #テスト名
        self.name = "TEG-Egogram"
        # サブ名
        self.sub = "自我状態チェック"
        #説明
        self.desc = ["1. このテストは、自分のもつ自我状態の傾向をチェックすることを目的とします。",
                     "　それぞれの質問について、あまり深く考えず、第一印象を大切に回答してください。",
                     "2. 自分の傾向にいちばん当てはまるものを選んでください。",
                     "3. 質問は全部で53問です。",
                     "4. 各々の質問に対し、下記のいづれかで回答してください。",
                     "　その際「どちらでもない」が多すぎると正しい結果になりにくくなります。なるべく「はい」か「いいえ」を選んでください。",
                     "　　・　はい",
                     "　　・　どちらでもない",
                     "　　・　いいえ",
                     "5. 結果は回答の集計で示されます。各々のバロメータごとに数値で表されます。",
                     "　　・　CP（Critical Parent）：　批判的な親の自我状態",
                     "　　・　NP（Nurturing Parent）：　養育的な親の自我状態",
                     "　　・　A（Adult）：　成人の自我状態",
                     "　　・　FC（Free Child）：　自由な子供の自我状態",
                     "　　・　AC（Adapted Child）：　順応した子供の自我状態",
                     "　　・　L：　テストを真面目に受けているかをチェックする項目",
                     ]
        #質問リスト
        self.queries = ["他人の言うことに左右されやすい",
                        "納得のいかないことに抗議する",
                        "ユーモアのセンスがある",
                        "他人の評価が気になる",
                        "寛大である",
                        "他人の話を聞くときに根拠を求める",
                        "他人の目を気にして行動することが多い",
                        "心が広い",
                        "一度決めたことがよくぐらつく",
                        "いつも楽しいことを探している",
                        "物事には常に原因があるから結果があると考える",
                        "理屈っぽい",
                        "人の気持ちがよくわかる",
                        "良いと思うことは貫く",
                        "議論を好む",
                        "何かを始める前には情報を集める",
                        "新しいことをやってみることが多い",
                        "のびのびと振る舞うことができる",
                        "他人に指図されることが多い",
                        "夜更かしをすることがまったくない",
                        "何気ない気配りをする",
                        "人見知りをしない",
                        "自分に厳しい",
                        "一度決めたことはやりとおす",
                        "人の気持ちがなごむように話をする",
                        "責任感が強い",
                        "夢を見たことがない",
                        "しばしば人から言われた通りに行動してしまう",
                        "他人に指図されるより指図する方が多い",
                        "人を笑わせることが得意である",
                        "人の顔色をうかがってしまう",
                        "人助けをすることに喜びを感じる",
                        "物事を言葉できちんと説明できる",
                        "人の言うことが気になる",
                        "親身になって行動する",
                        "優柔不断である",
                        "常にその場を楽しむことができる",
                        "事実の確認を行う",
                        "予測して行動する",
                        "人に優しい言葉をかける",
                        "良くないことは指摘する",
                        "論理的である",
                        "筋道立てて考える",
                        "みんなとにぎやかに騒ぐのが好きだ",
                        "明るい",
                        "決断することが苦手である",
                        "風邪を引いたことがまったくない",
                        "人には温かく接している",
                        "よく笑う",
                        "言うべきことは言う",
                        "ついリーダーシップをとってしまう",
                        "人の役に立つように行動する",
                        "常に向上心を持つ"
                        ]
        #回答選択肢リスト
        self.options = ["いいえ",
                        "どちらでもない",
                        "はい"
                        ]
        #因子設定
        self.fac = ["cp", "np", "a", "fc", "ac", "l"]

    def cal(self, ans):         #判定結果計算
        # 各因子に関する項目
        cp = [2, 14, 23, 24, 26, 29, 41, 50, 51, 53]
        np = [5, 8, 13, 21, 25, 32, 35, 40, 48, 52]
        a = [6, 11, 12, 15, 16, 33, 38, 39, 42, 43]
        fc = [3, 10, 17, 18, 22, 30, 37, 44, 45, 49]
        ac = [1, 4, 7, 9, 19, 28, 31, 34, 46, 46]
        l = [20, 27, 47]
        #回答追加
        session['answers'].append(self.options[ans])
        #回答各因子に追加
        if session['que'] + 1 in cp:
            session['a_sum'][0] += ans
        elif session['que'] + 1 in np:
            session['a_sum'][1] += ans
        elif session['que'] + 1 in a:
            session['a_sum'][2] += ans
        elif session['que'] + 1 in fc:
            session['a_sum'][3] += ans
        elif session['que'] + 1 in ac:
            session['a_sum'][4] += ans
        elif session['que'] + 1 in l:
            session['a_sum'][5] += ans

    def judge(self):     #テスト結果判定
        return None
